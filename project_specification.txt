//
ECS Database.

Client define components, entities and system queries
Server adapt to registered queries and create components on the fly
Data stored once, accessed in any form.

Some references:
https://notes.eatonphil.com/zigrocks-sql.html
//

// Use case: e-commerce

my_errs {
  NotFound,
  DBMismatch,
  ExpectedSingleGotMany,
}

// Enums
MetaCommands {
  Quit,
  Help,
  DB,
  Entities,
  Components,
  Systems,
  DescribeDB,
  DescribeEntity,
  DescribeComponent,
  DescribeSystem,
  Exists
}

Token {

}

Condition {
  lhs: Any
  rhs: Any
  operator: equals | in
  not: ?not
  next: ?Condition
  operator: And | Or | XOr

  fn from_string()
}

Query {
  select: [Entities | Components]
  where: [Condition]
  limit: u32

  fn from_string(req: str) -> !Self {
    // we expect utf-8
    // string manipulation steps
    // remove \r (to account for windows)
    // replace \n with spaces
    var req_array = req.split(" ")
    // find all keywords if they exist. only "select" is mandatory
    var s_loc = try find "select" or "SELECT" in req_array
    var w_loc = find "where" or "WHERE" in req_array catch req_array.len
    var l_loc = find "limit" or "LIMIT" in req_array catch req_array.len

    select_types = req_array[s_loc+1..w_loc]
    assert select_types.len >= 1 // at least one select is excpected
    for (select_types) |type_name| {
      select.append(@astype(type_name))
    }
    
  }
}

Commands {
  Select,
  // SELECT component1, component2, component3
  // WHERE condition1 and (condition2 or condition3)
  // LIMIT n
  Insert,
  // INSERT User(
    Name="Caio",
    Role="admin",
    ...
  )
  Update,
  // UPDATE id_nnnn User(
    Name="Caio",
    Role="admin",
    ...
  )
  Drop,
  // DROP Entity
  // WHERE conditions . . . 

  Custom
  // FUNC name_of_func
  // WHERE query_param1, query_param2, ... # position args only. will fail if query "open spaces" do no match args
  // APPLY func_param1, func_param2, func_param3, ... # these are positional arguments to be passed to the callable. These are always strigs. it is the job of the callable to correctly parse the string.
}

// Components:
// Components is where the actual values live
// What is a Component?
struct Component {
  lock,
  cursor,
  record_size,
  reader,
  writer
}

Name(str)
Role(enum) {
  visitor,
  client,
  admin, 
  service
}
Price(float)
Picture(bytes)
Address{
    .street: str,
    .zipcode: int
}
Country(enum)
State(enum)
Comment(str)

DeliveryStatus {
    shipped,
    delivered,
    lost
}

// Entities
// Entities are just ids and carry no value per-se
User {
    Name,
    Role,
    LastLogin
    ?Picture,
    ?Country,
    ?State,
    ?Address
}

Product {
    Name,
    Picture,
    Price,
    Quantity,
}

Sale {
    *User,
    *Product,
    Price,
    Country,
    State,
    Address,
    DeliveryStatus,
    Timestamp
}

Review {
    *User,
    Comment,
    Timestamp
}

Log {
    *User,
    Comment,
    Timestamp
}

// This maybe necessary to match strings to types present in the DB
// the parser may need to access this list to build the queries
RegisteredTypes: Array

// Systems
struct CLI:
    // database version control
    fn init():

    // compare current structure, generate file of changes
    fn revision():

    // from file, apply changes
    fn apply_changes():

struct DBContext:
    allocator: *Allocator,
    server_config: port,
    filepath: ?File,
    entites = dict(Entity, men_ptr),
    components = dict(Component, mem_ptr),
    systems = dict(str, function),
    write_ahead_logging = ArrayList(empty)
    configs = .{
      page_size = 4kb
      validate_db = True // this will check if the file DB matches the current set of components and entities
      batch: 5 // wait for 5 changes in db before writing to disk
      db_default_location: "./data"
    }

    fn init(allocator, ?dbname, .{configs}):
        self.allocator = allocator;
        if (dbname) and (dbname.exists()) // dbname is a sys directory where we store all components.
            // try load db from file
            // try populate entity and components pointers
            // if (validade_db) {
                match the file_db with the entities and components currently declared.
                if mismatch return DBMismatch
            }
        else 
            self.entities = dict.init()
            self.components = dict.init()
        return DBContext;

    fn deinit(self):
        // clean system
    
    fn flush(self):
        // write db to file
        self.write_ahead_logging.write()

    fn serve():
        // listen to calls
        // periodically write WAL to disk
        // handle responses to user commands

    fn createDatabase(self, dbname) !void {
        // user provides a database_name. if not exist, create directory with that name.
    }

    fn createEntity(self, entity) !void {
        entity_ptr = allocate array for entity ids
        // store entity_ptr
        for (entity) |component} {
            comp_ptr = try self.locate(component) catch |err| {
                if (err == NotFound) createComponent(component)
                else return
            }
        }
    }

    fn createComponent(self, component) !void{
        // alocate memory to component
        // how much memory should we allocate as default?
        // store slice to self.components
    }

    fn locate(self, entity|component) NotFound!mem_pointer {
        for (self.entity|components) |e/comp, mem_ptr| {
          if (e/comp == entity/component) return mem_ptr
        }
        return NotFound
    }

    fn batch_exec(self, list_of_actions) {
        // dont really know what to do here...
    }

    fn parse_metacommands() {}

    fn parse_commands() {}

    fn add_systems(ctx, "r/w", system_name, Query, callable) {
        // inspect the query. if enum is part of it, create new components to better organize array_ids
        ctd.write_systems.append()
    }

    // default queries
    fn drop(ctx, id|ids) !void {
        // can only drop full entities
        // drop all the entities matching the id
    }

    fn insert(ctx, entity) !void {
        // can only insert full entities.
    }

    fn update(ctx, id, Entity) !void {
        // the default update allows only replacement of a single entity_id with a new entity.
        // if the query return a list of matched ids, returns ExpectedSingleGotMany
    }

    fn select(ctx, ids, Entity|Components) !list[Entity]|list[tuples] {
        // if Entity, match all entity components to ids and return list
        // if Component or list of components, the id *must* be present on all components to be a valid result
    }

struct Entity{}

fn update_last_login(ctx, ids) !void:
    matched_logins = ctx.select(ids, .{LastLogin, State})
    for (matched_logins) |ll| {
        ll.* = timestamp.now()
        // if users manipulate data directly, can we ensure "commit", "rollback" and crash-recovery?
        // maybe we have to disallow directly derefence and create a .set() method to the component
        // so that we can write changes to a WAL, instead of directly writing it to the array.
        ll.set() = timestamp.now()
    }
    
// can we systematically expose documentation to custom created functions?
// maybe this is important because parsing strings will be pretty common task running inside the function
// and there's no direct way to read the inner matching strings.
fn update_purchase_status(ctx, ids, new_status) !void:
    parse_stats = match new_status {
        "created" => DeliveryStatus.Created,
        "cancelled" => DeliveryStatus.Cancelled,
        "returned" => DeliveryStatus.Returned,
        "delivered" => DeliveryStatus.Delivered,
    }
    matched_logins = ctx.select(ids, .{DeliveryStatus})
    for (matched_logins) |stats| {
        stats.* = parse_stats
    }


// how things should work:
fn main() !void {
    gpa = std.mem.gpa();
    allocator = gpa.allocator();
    ctx = DBContext.init(&Allocator, "meu_arquivo.db")

    entities = {User, Product, Sale, Review, Logs};
    for (entites) |e| {
        ctx.createEntity(e);
    }

    // I have separated systems, because I can run read systems in parallel and write systems hold a lock. 
    // Maybe we dont need that and read/write is defined at introspection level...
    ctx.add_write_systems(
        ("last_login", Query, update_last_login),
        ("cancel_purchase", Query, cancel_purchase)
    )
    ctx.add_read_systems(
        ("users_by_state", Query, users_groupby_state),
        ("purchases_cancelled", Query, purchases_cancelled)
    )

    // once served, the client get access to the default "select", "insert", "update" & "drop" commands
    // you also get access to all systems explicitly added to the server.
    // it is the job of the server to parse the requests from the user to the appropriate db action
    ctx.serve()
}

